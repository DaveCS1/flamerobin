===================================
== FlameRobin Build Instructions ==
===================================

Below are build instructions for FlameRobin on all supported build environments.

--------------------------
-- Common to all builds --
--------------------------

-- General Requirements

Required:
 * A C++14 compiler (Visual Studio on Windows, G++ on Linux, others may work but untested)
   https://visualstudio.microsoft.com/ https://gcc.gnu.org/
 * The wxWidgets library - https://www.wxwidgets.org/
 * CMake - https://cmake.org/
 * git - https://git-scm.com/
Optional:
 * GitHub desktop app (for interacting with the project) - https://github.com/
 * TortoiseGit (Windows extension) - https://tortoisegit.org/

-- Notes

FR must be built with the same settings for debug/release etc.  as the
wxWidgets library.( Unicode build is required ) Failing to do so will usually
lead to compile or link errors. This does not apply completely to Linux/GCC
build, as you can build wx in release mode and FlameRobin in debug mode - in
case you just want to debug FR code, and not code of wxWidgets.

If you have problems building FR, please contact the development team:
https://github.com/mariuz/flamerobin

-----------------------------------------
-- MSW - Visual C++ Build Instructions --
-----------------------------------------

There are two ways to build using Microsoft Visual C++. One is via the dsp/dsw
project files, and the other is via the makefile.vc command line makefile.

* Using the dsp/dsw projects *

Since custom build steps are not set up for the Visual Studio build the
update-revision-info.cmd script is not automatically run during the build, so the
src/revisioninfo.h file may be missing or outdated. Please run the
update-revision-info.cmd manually after a checkout of the sources and each svn
update.

Double click on flamerobin\flamerobin.dsw, select a build configuration by
going to the Build menu, selecting "Set build configuration" and then
picking a config, then build!

* Using the makefiles *
To use the makefiles, start up a command line and navigate to the
flamerobin directory. There, run the following command:

nmake -f makefile.vc <BUILD OPTIONS>

Build options can be any of the following:

WXDIR=<dir> - tells the makefile where to find the root wxWidgets directory
FINAL=<0,1> - tells whether to build debug (0) or release (1) build
USEDLL=<0,1> - tells whether to link against wx static or dynamic libs

WXDIR *must* be specified (or set as an environment variable), but the rest
default to 0 and are optional.

------------------------------------------------------
-- MSW - Visual C++ 20xx Express Build Instructions --
------------------------------------------------------

Microsoft Visual C++ Express is a freeware version of MS Visual Studio.
There are two ways to build FlameRobin. One is via the dsp/dsw
project files, and the other is via the makefile.vc command line makefile.

* Using the dsp/dsw/sln projects *

Double click on flamerobin\flamerobin_flamerobin.sln, select a build
configuration by going to the Build menu, selecting "Set build configuration"
and then picking a config, then build!

* Using the makefiles *
To use the makefiles, start up a command line and navigate to the
flamerobin directory. There, run the following command:

nmake -f makefile.vc <BUILD OPTIONS>

Build options can be any of the following:

WXDIR=<dir> - tells the makefile where to find the root wxWidgets directory
FINAL=<0,1> - tells whether to build debug (0) or release (1) build
USEDLL=<0,1> - tells whether to link against wx static or dynamic libs

WXDIR *must* be specified (or set as an environment variable), but the rest
default to 0 and are optional.

-----------------------------------------------------------
-- MSW - Building wxWidgets with Visual C++ 20xx Express --
-----------------------------------------------------------

Unpack the archive somewhere, for example c:\wxWidgets:

* Using the dsp/dsw/sln projects *

Double click on build\msw\wx.dsw, convert to new format, select a build
configuration by going to the Build menu, selecting "Set build configuration"
and then picking a config, then build!


* Using the makefiles *
Open cmd.exe  prompt and go into "build\msw" directory:
set WXWIN=c:\wxWidgets
set WXDIR=c:\wxWidgets
nmake -f makefile.vc BUILD=release RUNTIME_LIBS=static

If you wish to build an executable that is small in size (just like the
official one), you need to build wx from the command line using modified
makefile.vc. Just edit the makefile.vc and change the __OPTIMIZEFLAG setting
from /O2 to /O1.


----------------------------------------
-- Unix - Autoconf Build Instructions --
----------------------------------------

To build on Unix or MinGW, simply open a command line, cd into the flamerobin
root directory, and execute the following commands:

mkdir debug
cd debug
../configure --with-wx-config=/my/path/to/wx-config --enable-debug

for a build in debug configuration, and the following commands

mkdir release
cd release
../configure --with-wx-config=/my/path/to/wx-config --disable-debug

for a build in release configuration.

You only need to specify wx-config if you do not have a wx-config that can
be found on the PATH, or if you want to use a wx-config other than the
default one.

Running the command

make

should build the flamerobin executable. If you experience any problems,
please check the flamerobin developer mailing list archive, or ask a
question there.


--------------------------------------------
-- Mac OS  - Autoconf Build Instructions --
--------------------------------------------

Before compiling you need to install these packages (easily with brew)

brew install autoconf
brew install wxwidgets
brew install boost

To build FlameRobin on Mac OS 10.5 minimum, open
a command line, cd into the flamerobin root directory, and execute the
following commands:

cd ..
mkdir release
cd release
../configure --disable-debug --disable-dependency-tracking
make
make install

Now you will have working Flamerobin.app which you should move to /Applications folder.

The resulting bundles differ only in the flamerobin executable, the lipo
tool can be used to make a Universal Build out of them.

----------------------------------------------
-- Unix - Building wxWidgets with configure --
----------------------------------------------

Unpack the sources, enter "build" directory and run "./configure". There
are many options you may like to set, run "./configure --help" to find about
them. We assume Gtk static release build with Unicode support:

./configure --disable-shared --disable-debug --enable-unicode --prefix=/opt/wxwidgets

make -j4
make install


Depending on your --prefix setting, you might need to run 'make install' as
superuser (root).
